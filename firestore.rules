rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    
    // Funciones de Ayuda CORREGIDAS
    //============================================
    
    function isUpdatingAllowedFields(allowedFields) {
      return request.resource.data
        .diff(resource.data)
        .affectedKeys()
        .hasOnly(allowedFields); // ¡CORREGIDO: Usando hasOnly!
    }
    // Devuelve true si NINGUNO de los campos prohibidos
    // está siendo modificado.
    function doesNotChangeFields(disallowedFields) {
      return !request.resource.data
        .diff(resource.data)
        .affectedKeys()
        .hasAny(disallowedFields); // ¡CORREGIDO: Usando hasAny!
    }


    //============================================
    // Reglas para Perfiles de Usuario (users)
    //============================================
    match /users/{userId} {
      // Permite la lectura para todos (autenticados o no).
      allow read: if true;

      // Permite a un usuario crear o borrar su propio perfil si está autenticado.
      allow create, delete:
        if request.auth != null && request.auth.uid == userId;

      // Permite la actualización si:
      // 1. El usuario autenticado es un administrador (puede cambiar cualquier campo).
      // O
      // 2. El usuario se está actualizando a sí mismo, pero SIN cambiar campos protegidos
      //    como 'isPremium', 'isAdmin', 'followersCount', 'followingCount', 'ratingCount', 'ratingAverage'.
      allow update:
        if (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin)
        || (request.auth != null
            && request.auth.uid == userId
            && doesNotChangeFields(['isPremium','isAdmin','followersCount','followingCount','ratingCount','ratingAverage']));

      // Subcolecciones de usuarios (favorites, followers, following, reviews)
      match /favorites/{listingId} {
        // Solo el dueño del perfil puede leer y escribir sus favoritos.
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      match /followers/{followerId} {
        // Un usuario puede leer sus propios seguidores.
        // Un usuario puede "seguir" (escribir en la subcolección del seguido) si está autenticado.
        // La regla para 'create' aquí significa que un usuario puede añadir su UID a la lista de 'followers' de otro.
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null; // Asume que 'write' es para seguir/dejar de seguir a alguien
      }
      match /following/{followingId} {
        // Solo el dueño del perfil puede leer y escribir a quién sigue.
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      match /reviews/{reviewId} {
        // Cualquiera puede leer las reseñas de un perfil.
        // Solo usuarios autenticados (que no son el dueño del perfil reseñado) pueden crear reseñas.
        allow read: if true;
        allow create: if request.auth != null && request.auth.uid != userId;
        // No se permite actualizar/eliminar reseñas una vez creadas (o se añadirían reglas específicas si fuera necesario).
        allow update, delete: if false;
      }
    }

    //============================================
    // Reglas para Anuncios (listings)
    //============================================
    match /listings/{listingId} {
      // Cualquiera puede leer los anuncios.
      allow read: if true;
      // Solo un usuario autenticado puede crear un anuncio y debe ser el dueño del anuncio.
      allow create:
        if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Solo el dueño del anuncio puede eliminarlo.
      allow delete:
        if request.auth != null && request.auth.uid == resource.data.userId;

      // Permite la actualización si:
      allow update:
        // 1) El dueño del anuncio puede cambiar lo que quiera en su propio anuncio.
        if (request.auth != null && request.auth.uid == resource.data.userId)
        // 2) Cualquier usuario autenticado puede INCREMENTAR 'viewCount' en EXACTAMENTE +1.
        //    Esto evita que se manipulen las vistas.
        || (
           request.auth != null // Debe estar autenticado
           && isUpdatingAllowedFields(['viewCount']) // Solo se afecta 'viewCount'
           && request.resource.data.viewCount == resource.data.viewCount + 1 // El nuevo valor es el anterior + 1
        )
        // 3) Cualquier usuario autenticado puede cambiar 'favoriteCount' en EXACTAMENTE ±1.
        //    Esto se usa cuando un usuario añade/quita un anuncio de sus favoritos.
        || (
           request.auth != null // Debe estar autenticado
           && isUpdatingAllowedFields(['favoriteCount']) // Solo se afecta 'favoriteCount'
           && (request.resource.data.favoriteCount == resource.data.favoriteCount + 1
               || request.resource.data.favoriteCount == resource.data.favoriteCount - 1)
        );
    }

    //============================================
    // Reglas para Chats (chats)
    //============================================
   
match /chats/{chatId} {

      function authed() { return request.auth != null; }
      function participantsOfCreate() {
        return (request.resource.data.participants is list)
          ? request.resource.data.participants
          : [];
      }
      function isParticipantExisting() {
        return authed() && (request.auth.uid in resource.data.participants);
      }

      // CREATE: basta con que sea authed y esté dentro de participants (2 miembros)
      allow create: if authed()
        && participantsOfCreate().size() == 2
        && request.auth.uid in participantsOfCreate();

      // READ: solo participantes
      allow read: if isParticipantExisting();

      // UPDATE: permite a un participante actualizar cualquier campo (más laxo para depurar)
      allow update: if isParticipantExisting();

      // -------- Subcolección de mensajes --------
      match /messages/{messageId} {
        // Solo participantes leen
        allow read: if authed() &&
          (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);

        // Crear mensaje: participante y el sender debe ser el usuario
        allow create: if authed()
          && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants)
          && request.resource.data.sender == request.auth.uid;

        // No se edita ni borra mensajes
        allow update, delete: if false;
      }
    }

    // (si tienes users)
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}